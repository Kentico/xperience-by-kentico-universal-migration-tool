name: "CI: Build and Test"

on:
  push:
    branches: [main, feat/github-actions-pipeline]
    paths:
      - "**.cs"
      - "**.cshtml"
      - "**.tsx"
      - "**.js"
      - "**.json"
      - "**.csproj"
      - "**.props"
      - "**.targets"
      - "**.sln"
      - "**.yml"
  pull_request:
    branches: [main]
    paths:
      - "**.cs"
      - "**.cshtml"
      - "**.tsx"
      - "**.js"
      - "**.json"
      - "**.csproj"
      - "**.props"
      - "**.targets"
      - "**.sln"

env:
  XBK_DIR: ${{ github.workspace }}/../xbk
  SA_PASSWORD: "Your_password123"
  XBK_ADMIN_PASSWORD: "administrator"
  LICENCE_FILE: "licence.txt"

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      sqlserver:
        image: mcr.microsoft.com/mssql/server:2019-latest
        env:
          SA_PASSWORD: ${{ env.SA_PASSWORD }}
          ACCEPT_EULA: "Y"
        ports:
          - 1433:1433
        options: >-
          --health-cmd "exit 0"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      # UMT setup
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          global-json-file: global.json

      - name: Install dependencies
        run: |
          dotnet restore --locked-mode

      - name: Build Solution
        run: |
          dotnet build --configuration Release --no-restore

      # Xperience by Kentico setup
      - name: <XbK> Install kentico templates
        run: |
          XBK_CORE_VERSION=$(grep -oP '(?<=<PackageVersion Include="Kentico.Xperience.Core" Version=")[^"]*' Directory.Packages.props)
          echo "Kentico.Xperience.Core version: $XBK_CORE_VERSION"

          mkdir $XBK_DIR
          cd $DIR
          dotnet new install Kentico.Xperience.Templates::$XBK_CORE_VERSION

      - name: <XbK> Create Kentico Xperience project
        working-directory: ${{ env.XBK_DIR }}
        run: |
          echo "y" | dotnet new kentico-xperience-mvc -n kentico-boilerplate

      - name: <XbK> Run kentico dbmanager with license
        working-directory: ${{ env.XBK_DIR }}
        run: |
          echo ${{ secrets.XPERIENCE_BY_KENTICO_LICENSE }} > $LICENCE_FILE
          dotnet kentico-xperience-dbmanager -- -s "localhost" -d "pwtest" -u "sa" -p "$SA_PASSWORD" -a "$XBK_ADMIN_PASSWORD" --recreate-existing-database --hash-string-salt "<hash_string_salt>" --license-file "$LICENCE_FILE"
          rm $LICENCE_FILE

      - name: <XbK> Run kentico boilerplate
        working-directory: ${{ env.XBK_DIR }}
        run: |
          nohup dotnet run &> nohup.out &

      # Run example migration
      - name: Prepare appsettings.json
        run: |
          EXAMPLE_APPSETTINS="examples/Kentico.Xperience.UMT.Example.Console/appsettings.json"
          CMS_CONNECTION_STRING=$(jq -r '.ConnectionStrings.CMSConnectionString' $XBK_DIR/appsettings.json)
          jq ".ConnectionStrings.CMSConnectionString = \"$CMS_CONNECTION_STRING\" | .WebApplicationPhysicalPath = \"$XBK_DIR\"" $EXAMPLE_APPSETTINS > appsettings.json.tmp
          mv appsettings.json.tmp $EXAMPLE_APPSETTINS
          cat $EXAMPLE_APPSETTINS

      - name: Run example migration
        working-directory: ${{ github.workspace }}/examples/Kentico.Xperience.UMT.Example.Console
        run: |
          dotnet run

      # Playwright
      - name: Install Playwright
        working-directory: ${{ github.workspace }}/tests/Kentico.Xperience.UMT.Tests
        run: |
          dotnet build
          pwsh bin/Debug/net8.0/playwright.ps1 install --with-deps

      - name: Replace BASE_URL in test.runsettings
        run: |
          cat $XBK_DIR/Properties/launchSettings.json
          export BASE_URL=$(cat $XBK_DIR/Properties/launchSettings.json | jq -r '.profiles.kentico_boilerplate.applicationUrl')
          sed -i -e "s|http://localhost:53798|$BASE_URL|g" test.runsettings # TODO: Replace with regex

      - name: Print xbk output
        run: |
          cat $XBK_DIR/nohup.out

      - name: run tests
        run: |
          xvfb-run dotnet test --settings:test.runsettings

      - name: Stop XbK
        run: |
          pkill -f "dotnet"
